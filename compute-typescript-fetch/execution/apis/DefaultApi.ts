/* tslint:disable */
/* eslint-disable */
/**
 * Execution API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';

export interface RunFunctionRequest {
    environment: string;
    customerID: string;
    namespace: string;
    fnName: string;
    versionNumber: string;
    body: string;
    xAtmoState?: string;
}

/**
 * 
 */
export class DefaultApi extends runtime.BaseAPI {

    /**
     * Executes the given function, with the provided body, params and state loaded into the function at runtime.
     */
    async runFunctionRaw(requestParameters: RunFunctionRequest, initOverrides?: RequestInit): Promise<runtime.ApiResponse<void>> {
        if (requestParameters.environment === null || requestParameters.environment === undefined) {
            throw new runtime.RequiredError('environment','Required parameter requestParameters.environment was null or undefined when calling runFunction.');
        }

        if (requestParameters.customerID === null || requestParameters.customerID === undefined) {
            throw new runtime.RequiredError('customerID','Required parameter requestParameters.customerID was null or undefined when calling runFunction.');
        }

        if (requestParameters.namespace === null || requestParameters.namespace === undefined) {
            throw new runtime.RequiredError('namespace','Required parameter requestParameters.namespace was null or undefined when calling runFunction.');
        }

        if (requestParameters.fnName === null || requestParameters.fnName === undefined) {
            throw new runtime.RequiredError('fnName','Required parameter requestParameters.fnName was null or undefined when calling runFunction.');
        }

        if (requestParameters.versionNumber === null || requestParameters.versionNumber === undefined) {
            throw new runtime.RequiredError('versionNumber','Required parameter requestParameters.versionNumber was null or undefined when calling runFunction.');
        }

        if (requestParameters.body === null || requestParameters.body === undefined) {
            throw new runtime.RequiredError('body','Required parameter requestParameters.body was null or undefined when calling runFunction.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'text/plain';

        if (requestParameters.xAtmoState !== undefined && requestParameters.xAtmoState !== null) {
            headerParameters['X-Atmo-State'] = String(requestParameters.xAtmoState);
        }

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("bearerAuthentication", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/{environment}.{customerID}/{namespace}/{fnName}/{versionNumber}`.replace(`{${"environment"}}`, encodeURIComponent(String(requestParameters.environment))).replace(`{${"customerID"}}`, encodeURIComponent(String(requestParameters.customerID))).replace(`{${"namespace"}}`, encodeURIComponent(String(requestParameters.namespace))).replace(`{${"fnName"}}`, encodeURIComponent(String(requestParameters.fnName))).replace(`{${"versionNumber"}}`, encodeURIComponent(String(requestParameters.versionNumber))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: requestParameters.body as any,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Executes the given function, with the provided body, params and state loaded into the function at runtime.
     */
    async runFunction(requestParameters: RunFunctionRequest, initOverrides?: RequestInit): Promise<void> {
        await this.runFunctionRaw(requestParameters, initOverrides);
    }

}
