/* tslint:disable */
/* eslint-disable */
/**
 * Builder API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import {
    EditorState,
    EditorStateFromJSON,
    EditorStateToJSON,
    InlineResponse200,
    InlineResponse200FromJSON,
    InlineResponse200ToJSON,
    InlineResponse2001,
    InlineResponse2001FromJSON,
    InlineResponse2001ToJSON,
} from '../models';

export interface BuildFunctionRequest {
    language: string;
    environment: string;
    customerID: string;
    namespace: string;
    fnName: string;
    body: string;
}

export interface DeployDraftRequest {
    environment: string;
    customerID: string;
    namespace: string;
    fnName: string;
}

export interface GetDraftRequest {
    environment: string;
    customerID: string;
    namespace: string;
    fnName: string;
}

export interface GetTemplateRequest {
    language: string;
    namespace?: string;
}

export interface GetTemplateV2Request {
    language: string;
    fnName: string;
    namespace?: string;
}

export interface TestDraftRequest {
    environment: string;
    customerID: string;
    namespace: string;
    fnName: string;
}

/**
 * 
 */
export class DefaultApi extends runtime.BaseAPI {

    /**
     * Builds the provided code using the specified language toolchain
     */
    async buildFunctionRaw(requestParameters: BuildFunctionRequest, initOverrides?: RequestInit): Promise<runtime.ApiResponse<string>> {
        if (requestParameters.language === null || requestParameters.language === undefined) {
            throw new runtime.RequiredError('language','Required parameter requestParameters.language was null or undefined when calling buildFunction.');
        }

        if (requestParameters.environment === null || requestParameters.environment === undefined) {
            throw new runtime.RequiredError('environment','Required parameter requestParameters.environment was null or undefined when calling buildFunction.');
        }

        if (requestParameters.customerID === null || requestParameters.customerID === undefined) {
            throw new runtime.RequiredError('customerID','Required parameter requestParameters.customerID was null or undefined when calling buildFunction.');
        }

        if (requestParameters.namespace === null || requestParameters.namespace === undefined) {
            throw new runtime.RequiredError('namespace','Required parameter requestParameters.namespace was null or undefined when calling buildFunction.');
        }

        if (requestParameters.fnName === null || requestParameters.fnName === undefined) {
            throw new runtime.RequiredError('fnName','Required parameter requestParameters.fnName was null or undefined when calling buildFunction.');
        }

        if (requestParameters.body === null || requestParameters.body === undefined) {
            throw new runtime.RequiredError('body','Required parameter requestParameters.body was null or undefined when calling buildFunction.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'text/plain';

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("bearerAuthentication", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/api/v1/build/{language}/{environment}.{customerID}/{namespace}/{fnName}`.replace(`{${"language"}}`, encodeURIComponent(String(requestParameters.language))).replace(`{${"environment"}}`, encodeURIComponent(String(requestParameters.environment))).replace(`{${"customerID"}}`, encodeURIComponent(String(requestParameters.customerID))).replace(`{${"namespace"}}`, encodeURIComponent(String(requestParameters.namespace))).replace(`{${"fnName"}}`, encodeURIComponent(String(requestParameters.fnName))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: requestParameters.body as any,
        }, initOverrides);

        return new runtime.TextApiResponse(response) as any;
    }

    /**
     * Builds the provided code using the specified language toolchain
     */
    async buildFunction(requestParameters: BuildFunctionRequest, initOverrides?: RequestInit): Promise<string> {
        const response = await this.buildFunctionRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Deploys the specified runnable
     */
    async deployDraftRaw(requestParameters: DeployDraftRequest, initOverrides?: RequestInit): Promise<runtime.ApiResponse<string>> {
        if (requestParameters.environment === null || requestParameters.environment === undefined) {
            throw new runtime.RequiredError('environment','Required parameter requestParameters.environment was null or undefined when calling deployDraft.');
        }

        if (requestParameters.customerID === null || requestParameters.customerID === undefined) {
            throw new runtime.RequiredError('customerID','Required parameter requestParameters.customerID was null or undefined when calling deployDraft.');
        }

        if (requestParameters.namespace === null || requestParameters.namespace === undefined) {
            throw new runtime.RequiredError('namespace','Required parameter requestParameters.namespace was null or undefined when calling deployDraft.');
        }

        if (requestParameters.fnName === null || requestParameters.fnName === undefined) {
            throw new runtime.RequiredError('fnName','Required parameter requestParameters.fnName was null or undefined when calling deployDraft.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("bearerAuthentication", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/api/v1/draft/{environment}.{customerId}/{namespace}/{fnName}/promote`.replace(`{${"environment"}}`, encodeURIComponent(String(requestParameters.environment))).replace(`{${"customerID"}}`, encodeURIComponent(String(requestParameters.customerID))).replace(`{${"namespace"}}`, encodeURIComponent(String(requestParameters.namespace))).replace(`{${"fnName"}}`, encodeURIComponent(String(requestParameters.fnName))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.TextApiResponse(response) as any;
    }

    /**
     * Deploys the specified runnable
     */
    async deployDraft(requestParameters: DeployDraftRequest, initOverrides?: RequestInit): Promise<string> {
        const response = await this.deployDraftRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Gets the draft for the specified runnable
     */
    async getDraftRaw(requestParameters: GetDraftRequest, initOverrides?: RequestInit): Promise<runtime.ApiResponse<EditorState>> {
        if (requestParameters.environment === null || requestParameters.environment === undefined) {
            throw new runtime.RequiredError('environment','Required parameter requestParameters.environment was null or undefined when calling getDraft.');
        }

        if (requestParameters.customerID === null || requestParameters.customerID === undefined) {
            throw new runtime.RequiredError('customerID','Required parameter requestParameters.customerID was null or undefined when calling getDraft.');
        }

        if (requestParameters.namespace === null || requestParameters.namespace === undefined) {
            throw new runtime.RequiredError('namespace','Required parameter requestParameters.namespace was null or undefined when calling getDraft.');
        }

        if (requestParameters.fnName === null || requestParameters.fnName === undefined) {
            throw new runtime.RequiredError('fnName','Required parameter requestParameters.fnName was null or undefined when calling getDraft.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("bearerAuthentication", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/api/v1/draft/{environment}.{customerId}/{namespace}/{fnName}`.replace(`{${"environment"}}`, encodeURIComponent(String(requestParameters.environment))).replace(`{${"customerID"}}`, encodeURIComponent(String(requestParameters.customerID))).replace(`{${"namespace"}}`, encodeURIComponent(String(requestParameters.namespace))).replace(`{${"fnName"}}`, encodeURIComponent(String(requestParameters.fnName))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => EditorStateFromJSON(jsonValue));
    }

    /**
     * Gets the draft for the specified runnable
     */
    async getDraft(requestParameters: GetDraftRequest, initOverrides?: RequestInit): Promise<EditorState> {
        const response = await this.getDraftRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Returns a list of supported builder features. Primarily used to detect the presence of a testing service.
     */
    async getFeaturesRaw(initOverrides?: RequestInit): Promise<runtime.ApiResponse<InlineResponse200>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/api/v1/features`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => InlineResponse200FromJSON(jsonValue));
    }

    /**
     * Returns a list of supported builder features. Primarily used to detect the presence of a testing service.
     */
    async getFeatures(initOverrides?: RequestInit): Promise<InlineResponse200> {
        const response = await this.getFeaturesRaw(initOverrides);
        return await response.value();
    }

    /**
     * Returns an OK response to indicate a healthy service (returns no body)
     */
    async getHealthRaw(initOverrides?: RequestInit): Promise<runtime.ApiResponse<void>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/api/v1/health`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Returns an OK response to indicate a healthy service (returns no body)
     */
    async getHealth(initOverrides?: RequestInit): Promise<void> {
        await this.getHealthRaw(initOverrides);
    }

    /**
     * Gets the template for a new function of the given language
     */
    async getTemplateRaw(requestParameters: GetTemplateRequest, initOverrides?: RequestInit): Promise<runtime.ApiResponse<EditorState>> {
        if (requestParameters.language === null || requestParameters.language === undefined) {
            throw new runtime.RequiredError('language','Required parameter requestParameters.language was null or undefined when calling getTemplate.');
        }

        const queryParameters: any = {};

        if (requestParameters.namespace !== undefined) {
            queryParameters['namespace'] = requestParameters.namespace;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/api/v1/template/{language}`.replace(`{${"language"}}`, encodeURIComponent(String(requestParameters.language))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => EditorStateFromJSON(jsonValue));
    }

    /**
     * Gets the template for a new function of the given language
     */
    async getTemplate(requestParameters: GetTemplateRequest, initOverrides?: RequestInit): Promise<EditorState> {
        const response = await this.getTemplateRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Gets the template for a new function of the given language initialized with the supplied function name
     */
    async getTemplateV2Raw(requestParameters: GetTemplateV2Request, initOverrides?: RequestInit): Promise<runtime.ApiResponse<EditorState>> {
        if (requestParameters.language === null || requestParameters.language === undefined) {
            throw new runtime.RequiredError('language','Required parameter requestParameters.language was null or undefined when calling getTemplateV2.');
        }

        if (requestParameters.fnName === null || requestParameters.fnName === undefined) {
            throw new runtime.RequiredError('fnName','Required parameter requestParameters.fnName was null or undefined when calling getTemplateV2.');
        }

        const queryParameters: any = {};

        if (requestParameters.namespace !== undefined) {
            queryParameters['namespace'] = requestParameters.namespace;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/api/v2/template/{language}/{fnName}`.replace(`{${"language"}}`, encodeURIComponent(String(requestParameters.language))).replace(`{${"fnName"}}`, encodeURIComponent(String(requestParameters.fnName))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => EditorStateFromJSON(jsonValue));
    }

    /**
     * Gets the template for a new function of the given language initialized with the supplied function name
     */
    async getTemplateV2(requestParameters: GetTemplateV2Request, initOverrides?: RequestInit): Promise<EditorState> {
        const response = await this.getTemplateV2Raw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Tests drafts
     */
    async testDraftRaw(requestParameters: TestDraftRequest, initOverrides?: RequestInit): Promise<runtime.ApiResponse<InlineResponse2001>> {
        if (requestParameters.environment === null || requestParameters.environment === undefined) {
            throw new runtime.RequiredError('environment','Required parameter requestParameters.environment was null or undefined when calling testDraft.');
        }

        if (requestParameters.customerID === null || requestParameters.customerID === undefined) {
            throw new runtime.RequiredError('customerID','Required parameter requestParameters.customerID was null or undefined when calling testDraft.');
        }

        if (requestParameters.namespace === null || requestParameters.namespace === undefined) {
            throw new runtime.RequiredError('namespace','Required parameter requestParameters.namespace was null or undefined when calling testDraft.');
        }

        if (requestParameters.fnName === null || requestParameters.fnName === undefined) {
            throw new runtime.RequiredError('fnName','Required parameter requestParameters.fnName was null or undefined when calling testDraft.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("bearerAuthentication", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/api/v1/test/{environment}.{customerId}/{namespace}/{fnName}`.replace(`{${"environment"}}`, encodeURIComponent(String(requestParameters.environment))).replace(`{${"customerID"}}`, encodeURIComponent(String(requestParameters.customerID))).replace(`{${"namespace"}}`, encodeURIComponent(String(requestParameters.namespace))).replace(`{${"fnName"}}`, encodeURIComponent(String(requestParameters.fnName))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => InlineResponse2001FromJSON(jsonValue));
    }

    /**
     * Tests drafts
     */
    async testDraft(requestParameters: TestDraftRequest, initOverrides?: RequestInit): Promise<InlineResponse2001> {
        const response = await this.testDraftRaw(requestParameters, initOverrides);
        return await response.value();
    }

}
