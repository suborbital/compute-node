/* tslint:disable */
/* eslint-disable */
/**
 * Adminstrative API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import {
    Token,
    TokenFromJSON,
    TokenToJSON,
} from '../models';

export interface GetTokenRequest {
    environment: string;
    customerID: string;
    namespace: string;
    fnName: string;
}

/**
 * 
 */
export class DefaultApi extends runtime.BaseAPI {

    /**
     * Generates an authentication token for the given function, used to secure access to the code editor
     */
    async getTokenRaw(requestParameters: GetTokenRequest, initOverrides?: RequestInit): Promise<runtime.ApiResponse<Token>> {
        if (requestParameters.environment === null || requestParameters.environment === undefined) {
            throw new runtime.RequiredError('environment','Required parameter requestParameters.environment was null or undefined when calling getToken.');
        }

        if (requestParameters.customerID === null || requestParameters.customerID === undefined) {
            throw new runtime.RequiredError('customerID','Required parameter requestParameters.customerID was null or undefined when calling getToken.');
        }

        if (requestParameters.namespace === null || requestParameters.namespace === undefined) {
            throw new runtime.RequiredError('namespace','Required parameter requestParameters.namespace was null or undefined when calling getToken.');
        }

        if (requestParameters.fnName === null || requestParameters.fnName === undefined) {
            throw new runtime.RequiredError('fnName','Required parameter requestParameters.fnName was null or undefined when calling getToken.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/token/{environment}.{customerID}/{namespace}/{fnName}`.replace(`{${"environment"}}`, encodeURIComponent(String(requestParameters.environment))).replace(`{${"customerID"}}`, encodeURIComponent(String(requestParameters.customerID))).replace(`{${"namespace"}}`, encodeURIComponent(String(requestParameters.namespace))).replace(`{${"fnName"}}`, encodeURIComponent(String(requestParameters.fnName))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => TokenFromJSON(jsonValue));
    }

    /**
     * Generates an authentication token for the given function, used to secure access to the code editor
     */
    async getToken(requestParameters: GetTokenRequest, initOverrides?: RequestInit): Promise<Token> {
        const response = await this.getTokenRaw(requestParameters, initOverrides);
        return await response.value();
    }

}
